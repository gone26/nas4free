#!/bin/sh
#
# Part of NAS4Free (http://www.nas4free.org).
# Copyright (c) 2012-2016 The NAS4Free Project <info@nas4free.org>.
# All rights reserved.
#
# vbox service
#

# PROVIDE: vbox
# REQUIRE: LOGIN
# KEYWORD: nojail shutdown
# XQUERY: -i "count(//vbox/enable) > 0" -o "0" -b
# RCVAR: vbox

. /etc/rc.subr
. /etc/util.subr
. /etc/configxml.subr

name="vbox"
desc="vbox service"
rcvar="vbox_enable"

start_precmd="vbox_mkconf"
start_cmd="vbox_start"
stop_cmd="vbox_stop"
mkconf_cmd="vbox_mkconf"
vmstart_cmd="vbox_vmstart"
vmstop_cmd="vbox_vmstop"
extra_commands="mkconf vmstart vmstop"

phpvbox_conf=${phpvbox_conf:-"/usr/local/www/phpvirtualbox/config.php"}
vbox_certpem=${vbox_certpem:-"/var/etc/vbox-cert.pem"}
vbox_user=${vbox_user:-"vboxusers"}
vbox_group=${vbox_group:-"vboxusers"}
vbox_ipaddr=${vbox_ipaddr:-"127.0.0.1"}
vbox_port=${vbox_port:-"18083"}
vbox_vrdeports=${vbox_vrdeports:-"9000-9100"}

vbox_mkconf()
{
	local _user _group _homedir
	local _certificate _privatekey _tmpfile

	_user=${vbox_user}
	_group=${vbox_group}
	_homedir=`configxml_get "//vbox/homedir"`
	if [ "$_homedir" = "" ]; then
	    _homedir="/nonexistent"
	fi

	# Create phpVirtualBox config
	rm -f ${phpvbox_conf}
	cat <<EOF > ${phpvbox_conf}
<?php
class phpVBoxConfig {
var \$username = '${_user}';
var \$password = 'NOTUSE';
var \$location = 'http://${vbox_ipaddr}:${vbox_port}/';
var \$language = 'en';
var \$vrdeports = '${vbox_vrdeports}';
var \$maxProgressList = 5;
var \$deleteOnRemove = true;
var \$browserRestrictFiles = array('.iso','.vdi','.vmdk','.img','.bin','.vhd','.hdd','.ovf','.ova','.xml','.vbox','.cdr','.dmg','.ima','.dsk','.vfd');
var \$hostMemInfoRefreshInterval = 5;
var \$disableTabVMConsole = true;
var \$consoleResolutions = array('640x480','800x600','1024x768','1280x720','1440x900');
var \$consoleKeyboardLayout = 'EN';
var \$nicMax = 4;
var \$startStopConfig = true;
var \$enableAdvancedConfig = true;
}
EOF

	# Create devfs rules for tap devices
	grep "vbox_tap" /etc/devfs.rules > /dev/null 2>&1
	if [ $? -ne 0 ]; then
		echo "[vbox_tap=10]" >> /etc/devfs.rules
		echo "add path 'tap*' mode 0660 group ${vbox_group}" >> /etc/devfs.rules
		/usr/local/sbin/rconf attribute set devfs_system_ruleset vbox_tap
		/etc/rc.d/devfs start
	fi

	# Create certificate
	_certificate=`configxml_get "//system/webgui/certificate"`
	_privatekey=`configxml_get "//system/webgui/privatekey"`
	if [ -n "${_certificate}" -a -n "${_privatekey}" ]; then
		_tmpfile=/tmp/vbox$$.tmp

		echo "${_certificate}" > ${_tmpfile}
		/usr/bin/uudecode -m -p -r ${_tmpfile} > ${vbox_certpem}
		echo "" >> ${vbox_certpem}
		echo "${_privatekey}" > ${_tmpfile}
		/usr/bin/uudecode -m -p -r ${_tmpfile} >> ${vbox_certpem}

		/bin/rm -f ${_tmpfile}
	fi
	if [ -e ${vbox_certpem} ]; then
		/bin/chmod 0600 ${vbox_certpem}
		/usr/sbin/chown "${vbox_user}:${vbox_group}" ${vbox_certpem}
	fi
}

_get_vmlist()
{
	local _vmlist

	_vmlist=`/usr/local/bin/sudo -u ${vbox_user} /usr/local/bin/vboxmanage list runningvms | sed -e 's/.*{\(.*\)}$/\1/'`
	echo $_vmlist
}

_get_vmname()
{
	local _vmname _uuid

	_uuid="$1"
	if [ -z "$_uuid" ]; then
	    return
	fi
	_vmname=`/usr/local/bin/sudo -u ${vbox_user} /usr/local/bin/vboxmanage showvminfo "$_uuid" --machinereadable | sed -ne 's/^name="\(.*\)"$/\1/p'`
	echo $_vmname
}

_get_startup_vmlist()
{
	local _startupvm _vmlist _uuid _mode

	_vmlist=`/usr/local/bin/sudo -u ${vbox_user} /usr/local/bin/vboxmanage list vms | sed -e 's/.*{\(.*\)}$/\1/'`
	_startupvm=""
	for _uuid in $_vmlist; do
		_mode=`/usr/local/bin/sudo -u ${vbox_user} /usr/local/bin/vboxmanage getextradata "$_uuid" pvbx/startupMode | sed -e 's/^.*: \(.*\)$/\1/'`
		if [ "$_mode" = "auto" ]; then
			_startupvm="$_startupvm $_uuid"
		fi
	done
	echo $_startupvm
}

_vmstart()
{
	local _vmlist _vmname _uuid

	_vmlist=`_get_startup_vmlist`
	for _uuid in $_vmlist; do
		_vmname=`_get_vmname "$_uuid"`
		echo "Starting: $_vmname ($_uuid)"
		/usr/local/bin/sudo -u ${vbox_user} /usr/local/bin/vboxmanage startvm "$_uuid" --type headless >/dev/null 2>&1
	done
}

_vmstop_acpioff()
{
	local _vmlist _vmname _uuid

	_vmlist=`_get_vmlist`
	for _uuid in $_vmlist; do
		_vmname=`_get_vmname "$_uuid"`
		echo "ACPI off: $_vmname ($_uuid)"
		/usr/local/bin/sudo -u ${vbox_user} /usr/local/bin/vboxmanage controlvm "$_uuid" acpipowerbutton >/dev/null 2>&1
	done
}

_vmstop_poweroff()
{
	local _vmlist _vmname _uuid

	_vmlist=`_get_vmlist`
	for _uuid in $_vmlist; do
		_vmname=`_get_vmname "$_uuid"`
		echo "poweroff: $_vmname ($_uuid)"
		/usr/local/bin/sudo -u ${vbox_user} /usr/local/bin/vboxmanage controlvm "$_uuid" poweroff >/dev/null 2>&1
	done
}

vbox_vmstart()
{
	echo "Starting VM"
	_vmstart
}

vbox_vmstop()
{
	local _wait _vmlist _vmname _uuid

	echo "ACPI shutdown VM"
	_vmstop_acpioff

	# Waiting to stop (max 40 secs.)
	_wait=40
	echo -n "Waiting to stop VMs"
	while [ ${_wait} -gt 0 ]; do
		echo -n "."
		_wait=$((${_wait} - 1))
		/bin/sleep 1
		_vmlist=`_get_vmlist`
		if [ -z "$_vmlist" ]; then
			break
		fi
	done
	echo ""
	if [ -n "$_vmlist" ]; then
		echo "poweroff VM"
		_vmstop_poweroff
		# Waiting to stop (max 10 secs.)
		_wait=10
		echo -n "Waiting to stop VMs"
		while [ ${_wait} -gt 0 ]; do
			echo -n "."
			_wait=$((${_wait} - 1))
			/bin/sleep 1
			_vmlist=`_get_vmlist`
			if [ -z "$_vmlist" ]; then
				break
			fi
		done
		echo ""
		if [ -n "$_vmlist" ]; then
			for _uuid in $_vmlist; do
				_vmname=`_get_vmname "$_uuid"`
				echo "Cannot stop vm: $_vmname ($_uuid)"
			done
		fi
	fi
}

vbox_start()
{
	echo "VBox start..."
	if ! /sbin/kldstat -q -m if_tap; then
		/sbin/kldload if_tap > /dev/null 2>&1
	fi
	echo "VBox start: set sysctl options..."
	/sbin/sysctl -q net.link.tap.user_open=1 > /dev/null
	/sbin/sysctl -q net.link.tap.up_on_open=1 > /dev/null
	echo "VBox start: calling vboxnet onestart..."
	/usr/local/etc/rc.d/vboxnet onestart
	echo "VBox start: calling vboxwebsrv onestart..."
	/usr/local/etc/rc.d/vboxwebsrv onestart
	echo "VBox start: sleep a bit..."
	/bin/sleep 3
	echo "VBox start: starting virtual machines..."
	vbox_vmstart
}

vbox_stop()
{
	local _wait

	echo "VBox stop..."
	vbox_vmstop
	/usr/local/etc/rc.d/vboxwebsrv onestop

	# Waiting VBoxSVC shutdown
	_wait=15
	echo -n "Shutdown VBoxSVC"
	while [ ${_wait} -gt 0 ]; do
		echo -n "."
		_wait=$((${_wait} - 1))
		/bin/sleep 1
		if [ -z "`/bin/pgrep VBoxSVC`" ]; then
			break
		fi
	done
	echo ""
}

load_rc_config "${name}"
run_rc_command "$1"
