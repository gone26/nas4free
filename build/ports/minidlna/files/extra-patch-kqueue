--- configure.ac.orig	2015-09-11 04:24:09.000000000 +0900
+++ configure.ac	2015-09-30 21:33:29.288753000 +0900
@@ -40,9 +40,9 @@
 
 # Default string definitions
 AC_DEFINE_UNQUOTED([OS_URL],"http://sourceforge.net/projects/minidlna/",[OS URL])
-AC_DEFINE_UNQUOTED([ROOTDEV_MANUFACTURER],"Justin Maggard", [Manufacturer])
-AC_DEFINE_UNQUOTED([ROOTDEV_MANUFACTURERURL],"http://www.netgear.com/", [Manufacturer URL])
-AC_DEFINE_UNQUOTED([ROOTDEV_MODELNAME],"Windows Media Connect compatible (MiniDLNA)", [Model name])
+AC_DEFINE_UNQUOTED([ROOTDEV_MANUFACTURER],"NAS4Free", [Manufacturer])
+AC_DEFINE_UNQUOTED([ROOTDEV_MANUFACTURERURL],"http://www.nas4free.org", [Manufacturer URL])
+AC_DEFINE_UNQUOTED([ROOTDEV_MODELNAME],"Simple Media Server (MiniDLNA)", [Model name])
 AC_DEFINE_UNQUOTED([ROOTDEV_MODELDESCRIPTION],"MiniDLNA on " OS_NAME, [Model description])
 AC_DEFINE_UNQUOTED([ROOTDEV_MODELURL],OS_URL,[Model URL])
 
@@ -481,7 +481,7 @@
 ################################################################################################################
 ### Header checks
 
-AC_CHECK_HEADERS([arpa/inet.h asm/unistd.h endian.h machine/endian.h fcntl.h libintl.h locale.h netdb.h netinet/in.h stddef.h stdlib.h string.h sys/file.h sys/inotify.h sys/ioctl.h sys/param.h sys/socket.h sys/time.h unistd.h])
+AC_CHECK_HEADERS([arpa/inet.h asm/unistd.h endian.h machine/endian.h fcntl.h libintl.h locale.h netdb.h netinet/in.h stddef.h stdlib.h string.h sys/file.h sys/inotify.h sys/ioctl.h sys/param.h sys/socket.h sys/time.h unistd.h sys/event.h])
 
 AC_CHECK_FUNCS(inotify_init, AC_DEFINE(HAVE_INOTIFY,1,[Whether kernel has inotify support]), [
     AC_MSG_CHECKING([for __NR_inotify_init syscall])
--- inotify.c.orig	2015-09-11 04:24:09.000000000 +0900
+++ inotify.c	2015-10-05 04:37:06.260767000 +0900
@@ -17,7 +17,7 @@
  */
 #include "config.h"
 
-#ifdef HAVE_INOTIFY
+#if defined(HAVE_INOTIFY) || defined(HAVE_SYS_EVENT_H)
 #include <stdio.h>
 #include <string.h>
 #include <stdlib.h>
@@ -31,11 +31,16 @@
 #include <sys/time.h>
 #include <sys/resource.h>
 #include <poll.h>
+#ifdef HAVE_INOTIFY
 #ifdef HAVE_SYS_INOTIFY_H
 #include <sys/inotify.h>
-#else
+#else /*HAVE_SYS_INOTIFY_H*/
 #include "linux/inotify.h"
 #include "linux/inotify-syscalls.h"
+#endif /*HAVE_SYS_INOTIFY_H*/
+#else
+#include <sys/event.h>
+#include <fcntl.h>
 #endif
 #include "libav.h"
 
@@ -49,11 +54,13 @@
 #include "playlist.h"
 #include "log.h"
 
+#ifdef HAVE_INOTIFY
 #define EVENT_SIZE  ( sizeof (struct inotify_event) )
 #define BUF_LEN     ( 1024 * ( EVENT_SIZE + 16 ) )
 #define DESIRED_WATCH_LIMIT 65536
 
 #define PATH_BUF_SIZE PATH_MAX
+#endif
 
 struct watch
 {
@@ -86,12 +93,34 @@
 	struct watch *nw;
 	int wd;
 
+#ifdef HAVE_INOTIFY
 	wd = inotify_add_watch(fd, path, IN_CREATE|IN_CLOSE_WRITE|IN_DELETE|IN_MOVE);
 	if( wd < 0 )
 	{
 		DPRINTF(E_ERROR, L_INOTIFY, "inotify_add_watch(%s) [%s]\n", path, strerror(errno));
 		return -1;
 	}
+#else /*HAVE_INOTIFY*/
+	wd = open(path, O_RDONLY);
+	if (wd == -1)
+	{
+		DPRINTF(E_ERROR, L_INOTIFY, "inotify_add_watch[kqueue,open](%s) [%s]\n", path, strerror(errno));
+		return -1;
+	}
+
+	struct kevent ke;
+	EV_SET(&ke, wd,
+		EVFILT_VNODE,
+		EV_ADD | EV_ENABLE | EV_CLEAR,
+		NOTE_DELETE | NOTE_WRITE | NOTE_EXTEND /*| NOTE_ATTRB*/,
+		0, NULL);
+
+	if( kevent(fd, &ke, 1, NULL, 0, NULL) == -1 )
+	{
+		DPRINTF(E_ERROR, L_INOTIFY, "inotify_add_watch[kqueue](%s) [%s]\n", path, strerror(errno));
+		return -1;
+	}
+#endif
 
 	nw = malloc(sizeof(struct watch));
 	if( nw == NULL )
@@ -125,7 +154,14 @@
 	for( w = watches; w; w = w->next )
 	{
 		if( strcmp(path, w->path) == 0 )
+#ifdef HAVE_INOTIFY
 			return(inotify_rm_watch(fd, w->wd));
+#else
+		{
+			close(w->wd); /* kqueue cleans up events when handle dies*/
+			return(0);
+		}
+#endif
 	}
 
 	return 1;
@@ -145,15 +181,14 @@
 int
 inotify_create_watches(int fd)
 {
-	FILE * max_watches;
-	unsigned int num_watches = 0, watch_limit;
+	unsigned int num_watches = 0;
 	char **result;
 	int i, rows = 0;
 	struct media_dir_s * media_path;
 
 	for( media_path = media_dirs; media_path != NULL; media_path = media_path->next )
 	{
-		DPRINTF(E_DEBUG, L_INOTIFY, "Add watch to %s\n", media_path->path);
+		DPRINTF(E_DEBUG, L_INOTIFY, "Setiing up monitoring on %s\n", media_path->path);
 		add_watch(fd, media_path->path);
 		num_watches++;
 	}
@@ -166,6 +201,10 @@
 	}
 	sqlite3_free_table(result);
 		
+#ifdef HAVE_INOTIFY
+	FILE * max_watches;
+	unsigned int watch_limit;
+
 	max_watches = fopen("/proc/sys/fs/inotify/max_user_watches", "r");
 	if( max_watches )
 	{
@@ -204,6 +243,7 @@
 		DPRINTF(E_WARN, L_INOTIFY, "WARNING: Could not read inotify max_user_watches!  "
 		                        "Hopefully it is enough to cover %u current directories plus any new ones added.\n", num_watches);
 	}
+#endif
 
 	return rows;
 }
@@ -218,7 +258,11 @@
 	while( w )
 	{
 		last_w = w;
+#ifdef HAVE_INOTIFY
 		inotify_rm_watch(fd, w->wd);
+#else
+		close(w->wd); /*kqueue cleans up after fhandle dies*/
+#endif
 		free(w->path);
 		rm_watches++;
 		w = w->next;
@@ -294,6 +338,8 @@
 	struct media_dir_s * media_path = media_dirs;
 	struct stat st;
 
+	DPRINTF(E_DEBUG, L_INOTIFY, "inotify_insert_file: %s @ %s\n", name, path);
+
 	/* Is it cover art for another file? */
 	if( is_image(path) )
 		update_if_album_art(path);
@@ -447,6 +493,8 @@
 	struct media_dir_s* media_path;
 	struct stat st;
 
+	DPRINTF(E_DEBUG, L_INOTIFY, "inotify_insert_directory: %s @ %s\n", name, path);
+
 	if( access(path, R_OK|X_OK) != 0 )
 	{
 		DPRINTF(E_WARN, L_INOTIFY, "Could not access %s [%s]\n", path, strerror(errno));
@@ -614,6 +662,8 @@
 	int64_t detailID = 0;
 	int rows, i, ret = 1;
 
+	DPRINTF(E_DEBUG, L_INOTIFY, "inotify_remove_directory: %s\n", path);
+
 	/* Invalidate the scanner cache so we don't insert files into non-existent containers */
 	valid_cache = 0;
 	remove_watch(fd, path);
@@ -640,6 +690,7 @@
 	return ret;
 }
 
+#ifdef HAVE_INOTIFY
 void *
 start_inotify()
 {
@@ -758,4 +809,241 @@
 
 	return 0;
 }
+#else
+void *
+start_kqueue()
+{
+	int global_kqueue_handle = -1;
+
+	global_kqueue_handle = kqueue();
+	if ( global_kqueue_handle < 0 )
+	{
+		DPRINTF(E_ERROR, L_INOTIFY, "kqueue() failed: %s\n", strerror(errno));
+		return 0;
+	}
+
+	while( scanning )
+	{
+		if( quitting )
+			goto quitting;
+		
+		DPRINTF(E_DEBUG, L_INOTIFY, "..waiting for scanning to complete...\n");
+		sleep(1);
+	}
+
+	DPRINTF(E_DEBUG, L_INOTIFY, "GOING WILD!\n");
+
+	inotify_create_watches(global_kqueue_handle);
+	if (setpriority(PRIO_PROCESS, 0, 19) == -1)
+		DPRINTF(E_WARN, L_INOTIFY,	"Failed to reduce kqueue thread priority\n");
+	sqlite3_release_memory(1<<31);
+	av_register_all();
+
+	while( !quitting )
+	{
+		struct kevent ke;
+		struct timespec timeout;
+		int rv;
+		timeout.tv_sec = 5;
+		timeout.tv_nsec = 0;
+		if ( (rv = kevent(global_kqueue_handle, NULL, 0, &ke, 1, &timeout)) == -1)
+		{
+			if (errno == EINTR)
+				continue;
+			DPRINTF(E_WARN, L_INOTIFY,	"kevent polling failure: %s\n", strerror(errno));
+			continue;
+		}
+		if ( rv == 0 )
+			continue;
+
+		/*DPRINTF(E_DEBUG, L_INOTIFY,	"GOT KEVENT:\n"
+			"ident=0x%X, filter=0x%X, flags=0x%X, fflags=0x%X, data=0x%X, udata=0x%X\n", 
+			ke.ident, ke.filter, ke.flags, ke.fflags, ke.data, ke.udata);*/
+
+		char* dir_path = get_path_from_wd(ke.ident);
+		if (dir_path == NULL)
+		{
+			DPRINTF(E_ERROR, L_INOTIFY, "Path with FD=0x%X can't be resolved.\n", ke.ident);
+			continue;
+		}
+
+		if (ke.fflags & NOTE_DELETE)
+		{
+			DPRINTF(E_DEBUG, L_INOTIFY, "Path [%s] deleted.\n", dir_path);
+			inotify_remove_directory(ke.ident, dir_path);
+		}
+		else if ((ke.fflags & (NOTE_WRITE | NOTE_LINK)) == (NOTE_WRITE | NOTE_LINK))
+		{
+			DPRINTF(E_DEBUG, L_INOTIFY, "Path [%s] content updated (directory).\n", dir_path);
+
+			char * sql;
+			char **result;
+			int i, rows;
+			sql = sqlite3_mprintf("SELECT PATH from DETAILS where (PATH > '%q/' and PATH <= '%q/%c')"
+				" and SIZE = ''", dir_path, dir_path, 0xFF);
+			if( (sql_get_table(db, sql, &result, &rows, NULL) != SQLITE_OK) )
+			{
+				DPRINTF(E_WARN, L_INOTIFY, "Read state [%s]: Query failed, not updating\n", dir_path);
+				sqlite3_free(sql);
+				continue;
+			}
+
+			for( i=1; i <= rows; i++ )
+			{
+				DPRINTF(E_DEBUG, L_INOTIFY, "Indexed content: %s\n", result[i]);
+				if (access(result[i], R_OK) == -1)
+				{
+					/* actually, global_kqueue_handle is not used here */
+					inotify_remove_directory(global_kqueue_handle, result[i]);
+				}
+			}
+
+			DIR* d;
+			struct dirent * entry;
+			d = opendir(dir_path);
+			if (!d)
+			{
+				DPRINTF(E_ERROR, L_INOTIFY, "Can't list [%s] (%s)\n", dir_path, strerror(errno));
+				continue;
+			}
+
+			for ( entry = readdir(d); entry != NULL; entry = readdir(d) )
+			{
+				if ( (entry->d_type == DT_DIR) &&
+					(strcmp(entry->d_name, "..") != 0) &&
+					(strcmp(entry->d_name, ".") != 0) )
+				{
+					char tmp_path[PATH_MAX];
+					int result_path_len;
+
+					result_path_len = snprintf(tmp_path, PATH_MAX,
+						"%s/%s", dir_path, entry->d_name);
+					if (result_path_len >= PATH_MAX)
+					{
+						DPRINTF(E_ERROR, L_INOTIFY, "File path too long for %s!", entry->d_name);
+						continue;
+					}
+
+					DPRINTF(E_DEBUG, L_INOTIFY, "Walking %s\n", tmp_path);
+					char found_flag = 0;
+					for( i=1; i <= rows; i++ )
+					{
+						if (strcmp(result[i], tmp_path) == 0)
+						{
+							found_flag = 1;
+							break;
+						}
+					}
+
+					if ( !found_flag )
+					{
+						char * esc_name = NULL;
+						esc_name = modifyString(strdup(entry->d_name), "&", "&amp;amp;", 0);
+						inotify_insert_directory(global_kqueue_handle, esc_name, tmp_path);
+						free(esc_name);
+					}
+				}
+			}
+
+			closedir(d);
+
+			sqlite3_free_table(result);
+			sqlite3_free(sql);
+		}
+		else if (ke.fflags & NOTE_WRITE)
+		{
+			DPRINTF(E_DEBUG, L_INOTIFY, "Path [%s] content updated (file).\n", dir_path);
+
+			char * sql;
+			char **result;
+			int i, rows;
+			sql = sqlite3_mprintf("SELECT PATH from DETAILS where (PATH > '%q/' and PATH <= '%q/%c')"
+				" and SIZE <> ''", dir_path, dir_path, 0xFF);
+			if( (sql_get_table(db, sql, &result, &rows, NULL) != SQLITE_OK) )
+			{
+				DPRINTF(E_WARN, L_INOTIFY, "Read state [%s]: Query failed, not updating\n", dir_path);
+				sqlite3_free(sql);
+				continue;
+			}
+
+			for( i=1; i <= rows; i++ )
+			{
+				DPRINTF(E_DEBUG, L_INOTIFY, "Indexed content: %s\n", result[i]);
+				if (access(result[i], R_OK) == -1) /*oops, our file is gone*/
+				{
+					inotify_remove_file(result[i]);
+				}
+			}
+
+			DIR* d;
+			struct dirent * entry;
+			d = opendir(dir_path);
+			if (!d)
+			{
+				DPRINTF(E_ERROR, L_INOTIFY, "Can't list [%s] (%s)\n", dir_path, strerror(errno));
+				continue;
+			}
+
+			for ( entry = readdir(d); entry != NULL; entry = readdir(d) )
+			{
+				if ( (entry->d_type == DT_REG) ||
+				     (entry->d_type == DT_LNK) )
+				{
+					char tmp_path[PATH_MAX];
+					int result_path_len;
+
+					result_path_len = snprintf(tmp_path, PATH_MAX,
+						"%s/%s", dir_path, entry->d_name);
+					if (result_path_len >= PATH_MAX)
+					{
+						DPRINTF(E_ERROR, L_INOTIFY, "File path too long for %s!", entry->d_name);
+						continue;
+					}
+
+					DPRINTF(E_DEBUG, L_INOTIFY, "Walking %s\n", tmp_path);
+
+					char found_flag = 0;
+					for( i=1; i <= rows; i++ )
+					{
+						if (strcmp(result[i], tmp_path) == 0)
+						{
+							found_flag = 1;
+							break;
+						}
+					}
+
+					if ( !found_flag )
+					{
+						char * esc_name = NULL;
+						struct stat st;
+
+						if( stat(tmp_path, &st) != 0 )
+						{
+							DPRINTF(E_ERROR, L_INOTIFY, "'%s' disappeared!", tmp_path);
+							continue;
+						}
+
+						esc_name = modifyString(strdup(entry->d_name), "&", "&amp;amp;", 0);
+						if ( S_ISDIR(st.st_mode) )
+							inotify_insert_directory(global_kqueue_handle, esc_name, tmp_path);
+						else
+							inotify_insert_file(esc_name, tmp_path);
+						free(esc_name);
+					}
+				}
+			}
+
+			closedir(d);
+
+			sqlite3_free_table(result);
+			sqlite3_free(sql);
+		}
+	}
+	inotify_remove_watches(global_kqueue_handle);
+quitting:
+
+	return 0;
+}
 #endif
+
+#endif // defined(HAVE_INOTIFY) || defined(HAVE_SYS_EVENT_H)
--- inotify.h.orig	2015-09-11 04:24:09.000000000 +0900
+++ inotify.h	2015-09-30 21:46:31.281580000 +0900
@@ -4,4 +4,10 @@
 
 void *
 start_inotify();
+#elif defined(HAVE_SYS_EVENT_H)
+int
+inotify_remove_file(const char* path);
+
+void *
+start_kqueue();
 #endif
--- metadata.c.orig	2015-09-11 04:24:09.000000000 +0900
+++ metadata.c	2015-09-30 21:46:56.741851000 +0900
@@ -149,7 +149,7 @@
 
 	if (ret == 0)
 	{
-		sql_exec(db, "INSERT into CAPTIONS"
+		sql_exec(db, "INSERT OR REPLACE into CAPTIONS"
 		             " (ID, PATH) "
 		             "VALUES"
 		             " (%lld, %Q)", detailID, file);
--- minidlna.c.orig	2015-09-11 04:24:09.000000000 +0900
+++ minidlna.c	2015-09-30 21:50:51.234766000 +0900
@@ -46,6 +46,7 @@
  * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
  * POSSIBILITY OF SUCH DAMAGE.
  */
+#define FD_SETSIZE 8192
 #include <stdlib.h>
 #include <unistd.h>
 #include <string.h>
@@ -376,6 +377,7 @@
 		open_db(&db);
 		if (*scanner_pid == 0) /* child (scanner) process */
 		{
+			DPRINTF(E_DEBUG, L_GENERAL, "Starting scanner in forked child\n");
 			start_scanner();
 			sqlite3_close(db);
 			log_close();
@@ -385,6 +387,7 @@
 		}
 		else if (*scanner_pid < 0)
 		{
+			DPRINTF(E_DEBUG, L_GENERAL, "Starting scanner in parent\n");
 			start_scanner();
 		}
 #else
@@ -1052,6 +1055,15 @@
 		else if (pthread_create(&inotify_thread, NULL, start_inotify, NULL) != 0)
 			DPRINTF(E_FATAL, L_GENERAL, "ERROR: pthread_create() failed for start_inotify. EXITING\n");
 	}
+#elif defined(HAVE_SYS_EVENT_H)
+	if( GETFLAG(INOTIFY_MASK) )
+	{
+		if (!sqlite3_threadsafe() || sqlite3_libversion_number() < 3005001)
+			DPRINTF(E_ERROR, L_GENERAL, "SQLite library is not threadsafe!	"
+			"Kqueue will be disabled.\n");
+		else if (pthread_create(&inotify_thread, NULL, start_kqueue, NULL) != 0)
+			DPRINTF(E_FATAL, L_GENERAL, "ERROR: pthread_create() failed for start_kqueue. EXITING\n");
+	}
 #endif
 	smonitor = OpenAndConfMonitorSocket();
 
--- upnpevents.c.orig	2015-09-11 04:24:09.000000000 +0900
+++ upnpevents.c	2015-10-17 18:23:47.204539000 +0900
@@ -47,6 +47,7 @@
  */
 #include "config.h"
 
+#define FD_SETSIZE 8192
 #include <stdio.h>
 #include <string.h>
 #include <errno.h>
@@ -417,6 +418,10 @@
 {
 	struct upnp_event_notify * obj;
 	for(obj = notifylist.lh_first; obj != NULL; obj = obj->entries.le_next) {
+		if (obj->s > FD_SETSIZE)
+			DPRINTF(E_FATAL, L_HTTP,
+			    "upnpevents_selectfds: file descriptor %d too big for select, limit is %d\n", 
+			    obj->s, FD_SETSIZE);
 		DPRINTF(E_DEBUG, L_HTTP, "upnpevents_selectfds: %p %d %d\n",
 		       obj, obj->state, obj->s);
 		if(obj->s >= 0) {
--- inotify.c.orig	2015-10-07 10:53:52.924597000 +0900
+++ inotify.c	2015-10-07 10:59:55.679114000 +0900
@@ -333,10 +333,12 @@
 	char * parent_buf = NULL;
 	char * id = NULL;
 	int depth = 1;
+	int retry;
 	int ts;
 	media_types types = ALL_MEDIA;
 	struct media_dir_s * media_path = media_dirs;
 	struct stat st;
+	struct timeval now;
 
 	DPRINTF(E_DEBUG, L_INOTIFY, "inotify_insert_file: %s @ %s\n", name, path);
 
@@ -404,6 +406,19 @@
 	if( stat(path, &st) != 0 )
 		return -1;
 
+	(void)gettimeofday(&now, NULL);
+	retry = 0;
+	while (now.tv_sec < st.st_mtime + 3 && ++retry < 10)
+	{
+		DPRINTF(E_DEBUG, L_INOTIFY, "Sleeping until %s is stable for a few seconds ...\n", path);
+		sleep(1);
+		(void)gettimeofday(&now, NULL);
+		if (stat(path, &st) != 0)
+			return -1;
+		if (quitting)
+			return -1;
+	}
+
 	ts = sql_get_int_field(db, "SELECT TIMESTAMP from DETAILS where PATH = '%q'", path);
 	if( !ts && is_playlist(path) && (sql_get_int_field(db, "SELECT ID from PLAYLISTS where PATH = '%q'", path) > 0) )
 	{
